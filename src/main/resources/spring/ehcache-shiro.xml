<?xml version="1.0" encoding="UTF-8"?>
<ehcache updateCheck="false" name="defaultCache">
    <diskStore path="java.io.tmpdir" />
    <!--timeToIdleSeconds=y：缓存创建以后，最后一次访问缓存的日期至失效之时的时间间隔y;timeToLiveSeconds=x：缓存自创建日期起至失效时的间隔时间x;-->
    <defaultCache maxElementsInMemory="1000" eternal="false" timeToIdleSeconds="300" timeToLiveSeconds="600"
        overflowToDisk="true" maxElementsOnDisk="10000000" />
    <!-- 系统缓存 -->
    <cache name="sysCache" maxElementsInMemory="1000" eternal="true" overflowToDisk="true"/>
    <!--   
    eternal：缓存中对象是否为永久的，如果是，超时设置将被忽略，对象从不过期。  
    maxElementsInMemory：缓存中允许创建的最大对象数  
    overflowToDisk：内存不足时，是否启用磁盘缓存。  
    timeToIdleSeconds：缓存数据的钝化时间，也就是在一个元素消亡之前，  
            两次访问时间的最大时间间隔值，这只能在元素不是永久驻留时有效，  
     如果该值是 0 就意味着元素可以停顿无穷长的时间。  
    timeToLiveSeconds：缓存数据的生存时间，也就是一个元素从构建到消亡的最大时间间隔值，  
           这只能在元素不是永久驻留时有效，如果该值是0就意味着元素可以停顿无穷长的时间。  
    memoryStoreEvictionPolicy：缓存满了之后的淘汰算法。  
    1 FIFO，先进先出  
    2 LFU，最少被使用，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。  
    3 LRU，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。  
    -->  
    <cache name="shiro-activeSessionCache"  
           maxElementsInMemory="1000"  
           overflowToDisk="true"  
           timeToLiveSeconds="0"  
           timeToIdleSeconds="0"  
           diskPersistent="true"  
           diskExpiryThreadIntervalSeconds="600"/>  
</ehcache>
